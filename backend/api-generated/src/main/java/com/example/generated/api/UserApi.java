/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.generated.api;

import com.example.generated.model.NotFoundException;
import com.example.generated.model.UserCreation;
import com.example.generated.model.UserInfo;
import com.example.generated.model.UserInfoPage;
import com.example.generated.model.ValidationException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-02T17:49:04.935388930+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user : Creates a new user
     *
     * @param userCreation  (required)
     * @return Created user (status code 200)
     *         or Validation Exception (status code 400)
     */
    @Operation(
        operationId = "createUser",
        summary = "Creates a new user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Created user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserInfo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation Exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserInfo> createUser(
        @Parameter(name = "UserCreation", description = "", required = true) @Valid @RequestBody UserCreation userCreation
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{userId} : Deletes a user by its id
     *
     * @param userId  (required)
     * @return Operation succeeded (status code 200)
     *         or Not Found Exception (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Deletes a user by its id",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operation succeeded"),
            @ApiResponse(responseCode = "404", description = "Not Found Exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "userId", description = "", required = true) @PathVariable("userId") String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userId} : Returns a user info found by its id
     *
     * @param userId  (required)
     * @return Created user (status code 200)
     *         or Not Found Exception (status code 404)
     */
    @Operation(
        operationId = "findUser",
        summary = "Returns a user info found by its id",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Created user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserInfo.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found Exception", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserInfo> findUser(
        @Parameter(name = "userId", description = "", required = true) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user : Receives users info
     *
     * @param search The word to apply for filtering (optional)
     * @param page The number of page to be returned (optional, default to 0)
     * @param size The size of page to be returned (optional, default to 10)
     * @param sort The sort rules to be applied for define paging order (optional)
     * @return Page of users matching specified filtering and paging criteria (status code 200)
     */
    @Operation(
        operationId = "listUsers",
        summary = "Receives users info",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Page of users matching specified filtering and paging criteria", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserInfoPage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<UserInfoPage> listUsers(
        @Parameter(name = "search", description = "The word to apply for filtering") @Valid @RequestParam(value = "search", required = false) String search,
        @Parameter(name = "page", description = "The number of page to be returned") @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "The size of page to be returned") @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
        @Parameter(name = "sort", description = "The sort rules to be applied for define paging order") @Valid @RequestParam(value = "sort", required = false) List<String> sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

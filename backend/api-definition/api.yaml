openapi: '3.0.0'
info:
  version: '1.3.0'
  title: 'API'

servers:
  - url: 'http://localhost:8080/api'

tags:
  - name: 'User'
paths:
  /user:
    get:
      tags:
        - 'User'
      summary: 'Receives users info'
      operationId: 'list users'
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
      responses:
        200:
          $ref: '#/components/responses/userInfoPageResponse'
    post:
      tags:
        - 'User'
      summary: 'Creates a new user'
      operationId: 'create user'
      requestBody:
        $ref: '#/components/requestBodies/userCreation'
      responses:
        200:
          $ref: '#/components/responses/userInfoResponse'
        400:
          $ref: '#/components/responses/validationException'
  /user/{userId}:
    get:
      tags:
        - 'User'
      summary: 'Returns a user info found by its id'
      operationId: 'find user'
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/userInfoResponse'
        404:
          $ref: '#/components/responses/notFoundException'
    delete:
      tags:
        - 'User'
      summary: 'Deletes a user by its id'
      operationId: 'delete user'
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/emptySuccessfulResponse'
        404:
          $ref: '#/components/responses/notFoundException'

components:
  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    page:
      name: page
      description: 'The number of page to be returned'
      in: query
      required: false
      schema:
        type: integer
        default: 0
    search:
      name: search
      description: 'The word to apply for filtering'
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: 'The size of page to be returned'
      in: query
      required: false
      schema:
        type: integer
        default: 10
    sort:
      name: sort
      description: 'The sort rules to be applied for define paging order'
      explode: true
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          example: 'name,asc'

  requestBodies:
    userCreation:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userCreation'

  responses:
    userInfoPageResponse:
      description: 'Page of users matching specified filtering and paging criteria'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userInfoPage'
    userInfoResponse:
      description: 'Created user'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userInfo'
    emptySuccessfulResponse:
      description: 'Operation succeeded'
    notFoundException:
      description: 'Not Found Exception'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFoundException'
    validationException:
      description: 'Validation Exception'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/validationException'

  schemas:
    userCreation:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    userInfo:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    userInfoPage:
      type: object
      allOf:
        - $ref: '#/components/schemas/paged'
        - $ref: '#/components/schemas/userInfoPageElements'
    paged:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/pageInfo'
        sort:
          $ref: '#/components/schemas/sort'
        totalElements:
          type: integer
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    pageInfo:
      type: object
      properties:
        number:
          type: integer
        size:
          type: integer
        offset:
          type: integer
        paged:
          type: boolean
    sort:
      type: array
      items:
        type: string
    userInfoPageElements:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/userInfo'
    notFoundException:
      type: object
      properties:
        message:
          type: string
    validationException:
      type: object
      properties:
        message:
          type: string
openapi: '3.0.0'
info:
  title: 'API'
  version: '1.0.0'

servers:
  - url: 'http://localhost:8080/api'

tags:
  - name: 'User'
paths:
  /user:
    get:
      tags:
        - 'User'
      summary: 'Receives users info'
      operationId: 'list users'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        200:
          $ref: '#/components/responses/userInfoPageResponse'
    post:
      tags:
        - 'User'
      summary: 'Creates a new user'
      operationId: 'create user'
      requestBody:
        $ref: '#/components/requestBodies/userCreation'
      responses:
        200:
          $ref: '#/components/responses/userInfoResponse'
        400:
          $ref: '#/components/responses/validationException'
  /user/{userId}:
    get:
      tags:
        - 'User'
      summary: 'Returns a user info found by its id'
      operationId: 'find user'
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/userInfoResponse'
        404:
          $ref: '#/components/responses/notFoundException'
    delete:
      tags:
        - 'User'
      summary: 'Deletes a user by its id'
      operationId: 'delete user'
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/emptySuccessfulResponse'
        404:
          $ref: '#/components/responses/notFoundException'

  /search:
    post:
      operationId: 'search'
      summary: 'Searches for trip'
      requestBody:
        $ref: '#/components/requestBodies/searchRequest'
      responses:
        200:
          $ref: '#/components/responses/searchResponse'
        422:
          $ref: '#/components/responses/validationException'
  /searchList/{userId}:
    get:
      summary: 'Receives user search list (paged)'
      operationId: 'list user search'
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/transports'
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/tags'
      responses:
        200:
          $ref: '#/components/responses/searchPage'
    post:
      summary: 'Saves user search'
      operationId: 'save search'
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/searchStoring'
      responses:
        200:
          $ref: '#/components/responses/search'
        422:
          $ref: '#/components/responses/validationException'
        409:
          $ref: '#/components/responses/conflictException'
  /searchList/{userId}{searchId}:
    get:
      summary: 'Returns user search found by search id'
      operationId: 'find user search'
      parameters:
        - $ref: '#/components/parameters/searchId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/search'
        404:
          $ref: '#/components/responses/notFoundException'
    put:
      summary: 'Updates user search'
      operationId: 'update search'
      parameters:
        - $ref: '#/components/parameters/searchId'
        - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/searchUpdating'
      responses:
        200:
          $ref: '#/components/responses/search'
        404:
          $ref: '#/components/responses/notFoundException'
    delete:
      summary: 'Deletes user search'
      operationId: 'delete search'
      parameters:
        - $ref: '#/components/parameters/searchId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/emptySuccessfulResponse'
        404:
          $ref: '#/components/responses/notFoundException'


components:
  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    searchId:
      name: searchId
      in: path
      required: true
      schema:
        type: string
    page:
      name: page
      description: 'The number of page to be returned'
      in: query
      required: false
      schema:
        type: integer
        default: 0
    size:
      name: size
      description: 'The size of page to be returned'
      in: query
      required: false
      schema:
        type: integer
        default: 10
    transports:
      name: transports
      description: 'Transports to filter transport search list'
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/transportMode'
    date:
      name: date
      description: 'Date to filter search list'
      in: query
      required: false
      schema:
        type: string
    tags:
      name: tags
      description: 'Tags to filter search list'
      in: query
      required: false
      schema:
        type: array
        items:
          type: string

  requestBodies:
    userCreation:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userCreation'
    searchRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/searchRequest'
    searchStoring:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/search'
    searchUpdating:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/searchUpdating'

  responses:
    userInfoPageResponse:
      description: 'Page of users matching specified filtering and paging criteria'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userInfoPage'
    userInfoResponse:
      description: 'Created user'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userInfo'
    searchPage:
      description: 'Page of search history'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/searchPage'
    search:
      description: 'User saved search'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/search'
    searchResponse:
      description: 'Search response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/searchResponse'
    emptySuccessfulResponse:
      description: 'Operation succeeded'
    notFoundException:
      description: 'Not Found Exception'
    validationException:
      description: 'Validation Exception'
    conflictException:
      description: 'Conflict Exception'

  schemas:
    searchRequest:
      type: object
      properties:
        placesToVisit:
          type: array
          items:
            $ref: '#/components/schemas/placeInSearch'
        startPlace:
          $ref: '#/components/schemas/placeInSearch'
        endPlace:
          $ref: '#/components/schemas/placeInSearch'
        passengerCount:
          type: integer
        maxTripDuration:
          type: integer
        tripStartDate:
          type: string
        preferredTransport:
          $ref: '#/components/schemas/transportMode'
        optimizationCriteria:
          $ref: '#/components/schemas/criteriaMode'
      required:
        - startPlace
        - endPlace
        - passengerCount
        - tripStartDate
        - optimizationCriteria
        - maxTripDuration

    searchResponse:
      type: object
      properties:
        trips:
          type: array
          items:
            $ref: '#/components/schemas/searchResponseElement'

    searchResponseElement:
      type: object
      properties:
        startTime:
          type: string
        endTime:
          type: string
        totalDuration:
          type: integer
        totalTransferDuration:
          type: integer
        totalPrice:
          type: number
        passengersNumber:
          type: integer
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/transfer'

    transfer:
      type: object
      properties:
        startDateTime:
          type: string
        endDateTime:
          type: string
        carrier:
          type: string
        transportMode:
          $ref: '#/components/schemas/transportMode'
        cost:
          type: number
        duration:
          description: 'Duration in minutes'
          type: integer
        transferOrder:
          type: integer
        startAddress:
          type: string
        endAddress:
          type: string

    criteriaMode:
      type: string
      enum:
        - PRICE
        - DURATION
    placeInSearch:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        stayDuration:
          type: integer
        entryOrder:
          type: integer
      required:
        - country
        - city
        - stayDuration
        - entryOrder

    search:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        searchDate:
          type: string
        tags:
          type: array
          items:
            type: string
        placesToVisit:
          type: array
          items:
            $ref: '#/components/schemas/placeInSearch'
        startPlace:
          $ref: '#/components/schemas/placeInSearch'
        endPlace:
          $ref: '#/components/schemas/placeInSearch'
        passengerCount:
          type: integer
        maxTripDuration:
          type: integer
        tripStartDate:
          type: string
        preferredTransport:
          $ref: '#/components/schemas/transportMode'
        optimizationCriteria:
          $ref: '#/components/schemas/criteriaMode'
    transportMode:
      type: string
      enum:
        - BUS
        - TRAIN
        - PLANE
    searchPageElements:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/search'
    searchUpdating:
      type: object
      properties:
        name:
          type: string
        tags:
          type: array
          items:
            type: string
    userCreation:
      type: object
      required:
        - email
      properties:
        email:
          type: string
    userInfo:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    userInfoPage:
      type: object
      allOf:
        - $ref: '#/components/schemas/paged'
        - $ref: '#/components/schemas/userInfoPageElements'
    searchPage:
      type: object
      allOf:
        - $ref: '#/components/schemas/paged'
        - $ref: '#/components/schemas/searchPageElements'
    paged:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/pageInfo'
        sort:
          $ref: '#/components/schemas/sort'
        totalElements:
          type: integer
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    pageInfo:
      type: object
      properties:
        number:
          type: integer
        size:
          type: integer
        offset:
          type: integer
        paged:
          type: boolean
    sort:
      type: array
      items:
        type: string
    userInfoPageElements:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/userInfo'